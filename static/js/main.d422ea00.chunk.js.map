{"version":3,"sources":["api/api.ts","contexts/APIContext.tsx","components/Header/index.tsx","App.tsx","index.tsx"],"names":["transformRawMeal","rawMeal","meal","strIngredients","strMeasures","strIngredientRegex","strMeasureRegex","Object","keys","key","match","push","recipeItems","map","ingredient","index","measure","ingredients","youtubeID","URL","strYoutube","searchParams","get","MealAPI","baseURL","a","fetch","this","raw","json","meals","APIContext","createContext","APIContextProvider","props","useState","currentMeal","setCurrentMeal","getRamdom","console","log","Provider","value","getRandomMeal","children","useMeal","useContext","Header","src","alt","className","onClick","App","animation","setAnimation","showMeal","setShowMeal","useEffect","length","setTimeout","strMeal","strCategory","strArea","strTags","strMealThumb","ing","i","strInstructions","width","height","title","frameBorder","allow","allowFullScreen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d422ea00.chunk.js","sourcesContent":["import { mealType, rawMealType } from \"./types\";\n\n/**\n * Transforms\n *\n * {[strIngredient1, strIngredient2, strIngredient3....]}\n *\n * {[strMeasure1, strMeasure2, strMeasure3...]}\n *\n * to\n *\n * {ingredients: [\n *  { ingredient: string, measure: string }\n * ]}\n */\nfunction transformRawMeal(rawMeal: rawMealType): mealType {\n  let meal = {} as mealType;\n  const strIngredients: string[] = [];\n  const strMeasures: string[] = [];\n\n  const strIngredientRegex = /(strIngredient)/;\n  const strMeasureRegex = /(strMeasure)/;\n\n  for (let key of Object.keys(rawMeal)) {\n    if (key.match(strIngredientRegex)) {\n      // Caso o ingrediente estejam vazios não colocamos no array\n      if (rawMeal[key] !== \"\" && rawMeal[key] !== \" \")\n        strIngredients.push(rawMeal[key] as string);\n    } else if (key.match(strMeasureRegex)) {\n      // Caso as medidas estejam vazias não colocamos no array\n      if (rawMeal[key] !== \"\" && rawMeal[key] !== \" \")\n        strMeasures.push(rawMeal[key] as string);\n    } else {\n      meal = { ...meal, [key]: rawMeal[key] };\n    }\n  }\n\n  // Ao separarmos as repetições em arrays juntamos em um unico objeto contendo ambas informações\n  const recipeItems = strIngredients.map((ingredient, index) => {\n    return { ingredient, measure: strMeasures[index] };\n  });\n\n  meal = { ...meal, ingredients: recipeItems };\n\n  const youtubeID = new URL(meal.strYoutube).searchParams.get(\"v\");\n  meal = {\n    ...meal,\n    strYoutube: `https://www.youtube.com/embed/${youtubeID ? youtubeID : \"\"}`,\n  };\n\n  return meal as mealType;\n}\n\nclass Meal {\n  baseURL = \"https://www.themealdb.com/api/json/v1/1\";\n\n  async getRamdom() {\n    const raw = await fetch(`${this.baseURL}/random.php`);\n    const { meals }: { meals: rawMealType[] } = await raw.json();\n    const meal = transformRawMeal(meals[0]);\n\n    return meal;\n  }\n}\n\nconst MealAPI = new Meal();\nexport { MealAPI };\n","import { createContext, ReactNode, useContext, useState } from \"react\";\nimport { MealAPI } from \"../api/api\";\nimport { mealType } from \"../api/types\";\n\ntype PlayerContextData = {\n  currentMeal: mealType;\n  getRandomMeal: () => Promise<mealType | undefined>;\n};\n\ntype APIProviderProps = {\n  children: ReactNode;\n};\n\nexport const APIContext = createContext({} as PlayerContextData);\n\nexport function APIContextProvider(props: APIProviderProps) {\n  const [currentMeal, setCurrentMeal] = useState({} as mealType);\n\n  async function getRandomMeal() {\n    try {\n      const meal = await MealAPI.getRamdom();\n\n      setCurrentMeal(meal);\n      return meal;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <APIContext.Provider value={{ currentMeal, getRandomMeal }}>\n      {props.children}\n    </APIContext.Provider>\n  );\n}\n\nexport const useMeal = () => {\n  return useContext(APIContext);\n};\n","import \"./style.css\";\nimport { useMeal } from \"../../contexts/APIContext\";\n\nexport default function Header() {\n  const { getRandomMeal } = useMeal();\n\n  return (\n    <header>\n      <img src=\"/MealNow.svg\" alt=\"Are you hungry? MealNow\" />\n      <p className=\"title\">Feeling Hungry?</p>\n      <p className=\"title subtitle\">Get a random meal by clicking below</p>\n      <button onClick={getRandomMeal}>Get Meal</button>\n    </header>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { mealType } from \"./api/types\";\nimport Header from \"./components/Header\";\nimport { useMeal } from \"./contexts/APIContext\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  const { currentMeal } = useMeal();\n  const [animation, setAnimation] = useState(\"hide\");\n  const [showMeal, setShowMeal] = useState({} as mealType);\n\n  useEffect(() => {\n    if (Object.keys(currentMeal).length > 0) {\n      if (animation === \"active\") {\n        setAnimation(\"hide\");\n\n        setTimeout(() => {\n          setAnimation(\"active\");\n          setShowMeal(currentMeal);\n        }, 1000);\n      } else {\n        setAnimation(\"active\");\n        setShowMeal(currentMeal);\n      }\n    }\n  }, [currentMeal]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <main className={animation}>\n        <section className=\"recipe_container\">\n          <h1 className=\"recipe_name\">{showMeal.strMeal}</h1>\n          <div className=\"recipe_additional_info\">\n            <p>Category: {showMeal.strCategory}</p>\n            <p>Area: {showMeal.strArea}</p>\n            <p>Tags: {showMeal.strTags}</p>\n          </div>\n          <div className=\"recipe_ingredients_image_container\">\n            <div className=\"recipe_image_container\">\n              <img src={showMeal.strMealThumb} alt={currentMeal.strMeal} />\n            </div>\n            <div className=\"recipe_ingredients\">\n              <h3>Ingredients</h3>\n              <div>\n                <ul>\n                  {showMeal.ingredients?.map((ing, i) => {\n                    return (\n                      <li key={ing.ingredient + i}>\n                        <span>{ing.ingredient}</span>\n                      </li>\n                    );\n                  })}\n                </ul>\n                <hr />\n                <ul>\n                  {showMeal.ingredients?.map((ing, i) => {\n                    return (\n                      <li key={ing.ingredient + i}>\n                        <span>{ing.measure}</span>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <article className=\"recipe_content\">\n            <p>{currentMeal.strInstructions}</p>\n          </article>\n        </section>\n\n        <div className=\"recipe_youtube\">\n          <div>\n            <h3>Still can't do it ?</h3>\n            <p>Try watching this youtube video and start now your recipe!</p>\n          </div>\n          <iframe\n            width=\"560\"\n            height=\"315\"\n            src={currentMeal.strYoutube}\n            title=\"YouTube video player\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          ></iframe>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport { APIContextProvider } from \"./contexts/APIContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <APIContextProvider>\n      <App />\n    </APIContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}